package com.rahul.products.serviceTest;

import static org.hamcrest.CoreMatchers.is;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import javax.ws.rs.core.MediaType;

import org.cassandraunit.spring.CassandraUnit;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultMatcher;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.rahul.products.Repository.ProductRepository;
import com.rahul.products.controller.ProductController;
import com.rahul.products.model.Product;
import com.rahul.products.model.ProductPrimaryKey;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest({ "spring.data.cassandra.port=9042", "spring.data.cassandra.keyspace-name=cycling1" })
@EnableAutoConfiguration
@ComponentScan
@ContextConfiguration
@CassandraUnit
/*
 * @CassandraDataSet(value = { "cassandra-init.sh" }, keyspace = "cycling1")
 * 
 * @CassandraUnit
 */
public class ProductControllerTest {
	// mockmvc is used to do controller test it introduces dispatcher servelet
	private MockMvc mockMvc;
	@Autowired
	private WebApplicationContext context;
	@Autowired
	private ProductRepository productRepository;
	@Autowired
	private ProductController productController;

	@Before
	public void init() {
		this.mockMvc = MockMvcBuilders.standaloneSetup(productController).build();
	}

	@Test
	public void test() throws Exception {
		ProductPrimaryKey ppk= new ProductPrimaryKey(1, 2);
		Product product= new Product(ppk, "house", 10.00, "abc is good house ");
		
		when(productRepository.findByPkProductid(1)).thenReturn(product);
		
		mockMvc.perform(get("/product/get/{id}",1))
		.andExpect(status().isFound())
		.andExpect(content().contentType(MediaType.APPLICATION_JSON))
        .andExpect((ResultMatcher) jsonPath("$.id", is(1)))
        .andExpect((ResultMatcher) jsonPath("$.name", is("Gal Gadot")));

	}

}
/*
 * 
 * 
 * public class SupplierServiceTest {
 * 
 * private MockMvc mockMvc;
 * 
 * @Autowired private WebApplicationContext webApplicationContext;
 * 
 * @Autowired private SupplierRepository supplierRepository;
 * 
 * @Autowired private SupplierController supplierController;
 * 
 * @Autowired private SupplierService supplierService;
 * 
 * 
 * @Before public void init() { this.mockMvc =
 * MockMvcBuilders.standaloneSetup(supplierController).build(); }
 * 
 * @Test public void test() { assertEquals("Hi","Hi"); }
 * 
 * }
 */
package com.rahul.products.serviceTest;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import org.cassandraunit.spring.CassandraUnit;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.rahul.products.Repository.ProductRepository;
import com.rahul.products.controller.ProductController;
import com.rahul.products.model.Product;
import com.rahul.products.model.ProductPrimaryKey;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest({ "spring.data.cassandra.port=9042", "spring.data.cassandra.keyspace-name=test101" })
@EnableAutoConfiguration
@ComponentScan
@ContextConfiguration
@CassandraUnit

public class ProductControllerTest {
	// mockmvc is used to do controller test it introduces dispatcher servelet
	private MockMvc mockMvc;
	// @Autowired
	@Mock
	private ProductRepository productRepository;
	@Autowired
	private ProductController productController;

	@Before
	public void init() {
		this.mockMvc = MockMvcBuilders.standaloneSetup(productController).build();
	}

	@Test
	public void getProductTest() throws Exception {
		ProductPrimaryKey ppk = new ProductPrimaryKey(3, 2);
		Product product = new Product(ppk, "home2", 1000000000.0, "it is a home");

		when(productRepository.findByPkProductid(2)).thenReturn(product);

		mockMvc.perform(get("/product/get/{id}", 2)).andExpect(status().is(200)).andReturn().equals(product);
		//String body = (new ObjectMapper()).valueToTree(product).toString();
		
		/*
		 * ((MockHttpServletRequestBuilder) mockMvc.perform(post("product/create")))
		 * .content(body);
		 */

	}
	
	
	@Test
	public void createProduct() throws Exception {
	   String uri = "/products/create";
	   ProductPrimaryKey ppk = new ProductPrimaryKey(3, 2);
	   Product product = new Product(ppk, "home2", 1000000000.0, "it is a home");
	   mockMvc.perform(post(uri)).content("{ "accountType": "SAVINGS", "balance": 5000.0 }")
	
	}

}
